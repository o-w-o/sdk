@startuml
header 烛火录
footer Page %page% of %lastpage%

title Git 开发流程

autonumber

entity "Issue 需求" as Idea
boundary "Git 版本库（Coder）" as Git
control "master 主分支" as Master
control "feature 特性分支" as Feature
control "hotfix 修复分支" as Hotfix
boundary "CI / CD Server" as Pipeline
actor "DevOps Member" as DevOpsMember

alt 特性开发
  Idea -> Git : 实现特性 ** X **
  Git -> Master : 基于主分支
  Master -> Feature : 新建分支 ** git checkout -b feature/x **
  Feature -> Feature : 编码实现
  Feature -> Feature : 合并准备 ** git pull --rebase origin master && git push **
else 缺陷修复
  Idea -> Git : 修复异常 ** X **
  Git -> Master : 基于 标签 vx.x.x
  Master -> Feature : 新建分支 ** git checkout -b hotfix/x **
  Feature -> Feature : 代码修复
  Feature -> Feature : 合并准备 ** git pull --rebase origin master && git push **
end

Feature -> Pipeline : 触发测试
Pipeline -> Pipeline : 测试环境 测试
Pipeline -> DevOpsMember : 测试环境 请求验收
DevOpsMember -> Pipeline : 测试环境 通过验收
Pipeline -> Feature : 测试通过
Feature -> Master : 合并分支，删除已合并分支
Master -> Pipeline : 触发测试
Pipeline -> Pipeline : 测试
Pipeline -> Master : 测试通过

alt 特性开发
Master -> Git : 创建标签 ** git tag -a vx.x.x -m "feature version x.x.x" **
else 缺陷修复
Master -> Git : 创建标签 ** git tag -a vx.x.x -m "fix version x.x.x" **
end

Git -> Pipeline : 触发部署
Pipeline -> Pipeline : 正式环境 构建
Pipeline -> Pipeline : 正式环境 验收
Pipeline -> DevOpsMember : 正式环境 请求验收
DevOpsMember -> Pipeline : 正式环境 通过验收
Pipeline -> Pipeline : 正式环境 部署

alt 特性开发
Pipeline -> Idea : 特性开发完成
else 缺陷修复
Pipeline -> Idea : 缺陷修复完成
end

@enduml